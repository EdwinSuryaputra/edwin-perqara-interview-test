// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package generated

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// CreateSpec defines model for CreateSpec.
type CreateSpec struct {
	// Name The name of drink
	Name *string `json:"name,omitempty"`

	// Stock The stock of drink
	Stock *int `json:"stock,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Message error message
	Message *string `json:"message,omitempty"`
}

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	// Id The id of drink
	Id *string `json:"id,omitempty"`
}

// UpdateSpec defines model for UpdateSpec.
type UpdateSpec struct {
	// Name The name of drink
	Name *string `json:"name,omitempty"`

	// Stock Adjust amount of stock
	Stock *int `json:"stock,omitempty"`
}

// Id defines model for id.
type Id = string

// PostStorageDrinkJSONRequestBody defines body for PostStorageDrink for application/json ContentType.
type PostStorageDrinkJSONRequestBody = CreateSpec

// PutStorageDrinkIdJSONRequestBody defines body for PutStorageDrinkId for application/json ContentType.
type PutStorageDrinkIdJSONRequestBody = UpdateSpec

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Insert a new drink
	// (POST /storage/drink)
	PostStorageDrink(c *gin.Context)

	// (DELETE /storage/drink/{id})
	DeleteStorageDrinkId(c *gin.Context, id Id)
	// Update an existing of drink
	// (PUT /storage/drink/{id})
	PutStorageDrinkId(c *gin.Context, id Id)
	// Get all drinks inside of storage
	// (GET /storage/drinks)
	GetStorageDrinks(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostStorageDrink operation middleware
func (siw *ServerInterfaceWrapper) PostStorageDrink(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostStorageDrink(c)
}

// DeleteStorageDrinkId operation middleware
func (siw *ServerInterfaceWrapper) DeleteStorageDrinkId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteStorageDrinkId(c, id)
}

// PutStorageDrinkId operation middleware
func (siw *ServerInterfaceWrapper) PutStorageDrinkId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutStorageDrinkId(c, id)
}

// GetStorageDrinks operation middleware
func (siw *ServerInterfaceWrapper) GetStorageDrinks(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStorageDrinks(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/storage/drink", wrapper.PostStorageDrink)
	router.DELETE(options.BaseURL+"/storage/drink/:id", wrapper.DeleteStorageDrinkId)
	router.PUT(options.BaseURL+"/storage/drink/:id", wrapper.PutStorageDrinkId)
	router.GET(options.BaseURL+"/storage/drinks", wrapper.GetStorageDrinks)
}
