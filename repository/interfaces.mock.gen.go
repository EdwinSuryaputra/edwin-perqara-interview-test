// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=repository/interfaces.go -destination=repository/interfaces.mock.gen.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// DeleteDrink mocks base method.
func (m *MockRepositoryInterface) DeleteDrink(ctx context.Context, input DeleteDrinkInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDrink", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDrink indicates an expected call of DeleteDrink.
func (mr *MockRepositoryInterfaceMockRecorder) DeleteDrink(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDrink", reflect.TypeOf((*MockRepositoryInterface)(nil).DeleteDrink), ctx, input)
}

// GetDrinkByPublicId mocks base method.
func (m *MockRepositoryInterface) GetDrinkByPublicId(ctx context.Context, publicId string) (GetDrinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDrinkByPublicId", ctx, publicId)
	ret0, _ := ret[0].(GetDrinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDrinkByPublicId indicates an expected call of GetDrinkByPublicId.
func (mr *MockRepositoryInterfaceMockRecorder) GetDrinkByPublicId(ctx, publicId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrinkByPublicId", reflect.TypeOf((*MockRepositoryInterface)(nil).GetDrinkByPublicId), ctx, publicId)
}

// GetDrinks mocks base method.
func (m *MockRepositoryInterface) GetDrinks(ctx context.Context) ([]GetDrinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDrinks", ctx)
	ret0, _ := ret[0].([]GetDrinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDrinks indicates an expected call of GetDrinks.
func (mr *MockRepositoryInterfaceMockRecorder) GetDrinks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrinks", reflect.TypeOf((*MockRepositoryInterface)(nil).GetDrinks), ctx)
}

// InsertDrink mocks base method.
func (m *MockRepositoryInterface) InsertDrink(ctx context.Context, input InsertDrinkInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDrink", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDrink indicates an expected call of InsertDrink.
func (mr *MockRepositoryInterfaceMockRecorder) InsertDrink(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDrink", reflect.TypeOf((*MockRepositoryInterface)(nil).InsertDrink), ctx, input)
}

// UpdateDrink mocks base method.
func (m *MockRepositoryInterface) UpdateDrink(ctx context.Context, input UpdateDrinkInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDrink", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDrink indicates an expected call of UpdateDrink.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateDrink(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDrink", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateDrink), ctx, input)
}
