// Code generated by MockGen. DO NOT EDIT.
// Source: services/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=services/interfaces.go -destination=services/interfaces.mock.gen.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// DeleteDrink mocks base method.
func (m *MockServiceInterface) DeleteDrink(ctx context.Context, input DeleteDrinkInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDrink", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDrink indicates an expected call of DeleteDrink.
func (mr *MockServiceInterfaceMockRecorder) DeleteDrink(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDrink", reflect.TypeOf((*MockServiceInterface)(nil).DeleteDrink), ctx, input)
}

// GetDrinks mocks base method.
func (m *MockServiceInterface) GetDrinks(ctx context.Context) ([]GetDrinksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDrinks", ctx)
	ret0, _ := ret[0].([]GetDrinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDrinks indicates an expected call of GetDrinks.
func (mr *MockServiceInterfaceMockRecorder) GetDrinks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrinks", reflect.TypeOf((*MockServiceInterface)(nil).GetDrinks), ctx)
}

// InsertDrink mocks base method.
func (m *MockServiceInterface) InsertDrink(ctx context.Context, input CreateDrinkInput) (CreateDrinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDrink", ctx, input)
	ret0, _ := ret[0].(CreateDrinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertDrink indicates an expected call of InsertDrink.
func (mr *MockServiceInterfaceMockRecorder) InsertDrink(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDrink", reflect.TypeOf((*MockServiceInterface)(nil).InsertDrink), ctx, input)
}

// UpdateDrink mocks base method.
func (m *MockServiceInterface) UpdateDrink(ctx context.Context, input UpdateDrinkInput) (UpdateDrinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDrink", ctx, input)
	ret0, _ := ret[0].(UpdateDrinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDrink indicates an expected call of UpdateDrink.
func (mr *MockServiceInterfaceMockRecorder) UpdateDrink(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDrink", reflect.TypeOf((*MockServiceInterface)(nil).UpdateDrink), ctx, input)
}
